{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"nNum",
				"nNumVertexOut"
			],
			[
				"g_nBsp",
				"g_nBspOccluderDrawOccluders"
			],
			[
				"SBs",
				"SOccluderBspViewDesc"
			],
			[
				"g_W",
				"g_Width"
			],
			[
				"vMou",
				"vMouseWorld"
			],
			[
				"g_nOccluder",
				"g_nOccluderClipLevels"
			],
			[
				"BspT",
				"BspOccluderTest"
			],
			[
				"nNumVer",
				"nNumVertexIn"
			],
			[
				"pVerte",
				"pVertexNew"
			],
			[
				"vRig",
				"vRight2"
			],
			[
				"vRi",
				"vRight"
			],
			[
				"g_",
				"g_Height"
			],
			[
				"vrig",
				"vrightzx"
			],
			[
				"vright",
				"vrightx"
			]
		]
	},
	"buffers":
	[
		{
			"file": "glew/glew-1.9.0/include/GL/glew.h",
			"settings":
			{
				"buffer_size": 884678,
				"line_ending": "Windows"
			}
		},
		{
			"file": "renderlist.txt",
			"settings":
			{
				"buffer_size": 160,
				"line_ending": "Unix"
			}
		},
		{
			"file": "screenbsp.sublime-project",
			"settings":
			{
				"buffer_size": 49,
				"line_ending": "Unix"
			}
		},
		{
			"file": "premake4.lua",
			"settings":
			{
				"buffer_size": 1007,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/D/PRJ_PRO/main/code/readme.txt",
			"settings":
			{
				"buffer_size": 5945,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/D/PRJ_PRO/main/code/src/base/misc/_windows/_internal/system_win32.cpp",
			"settings":
			{
				"buffer_size": 2840,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/D/PRJ_PRO/main/code/src/base/threading/_internal/_windows/thread_win32.cpp",
			"settings":
			{
				"buffer_size": 5479,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "#pragma once\n\n\n\nvoid CreateMesh(",
			"settings":
			{
				"buffer_size": 32,
				"line_ending": "Unix",
				"name": "#pragma once"
			}
		},
		{
			"file": ".hgignore",
			"settings":
			{
				"buffer_size": 56,
				"line_ending": "Windows",
				"name": ".depend"
			}
		},
		{
			"contents": "                                                                     \n                                                                     \n                                                                     \n                                             \n\n\n\n\n\n\n#define OCCLUDER_EMPTY (0xc000)\n#define OCCLUDER_LEAF (0x8000)\n#define OCCLUDER_CLIP_MAX 0x100\n\nstruct SOccluderPlane\n{\n	float4 p[4];\n	float4 corners[4];\n	float4 normal;\n};\n\nstruct SOccluderEdgeIndex\n{\n	uint8 	nEdge;//[0-3] edge idx\n	uint16 	nOccluderIndex;\n};\n\nstruct SOccluderBspNode\n{\n	SOccluderEdgeIndex Index;\n	uint16	nInside;\n	uint16	nOutside;\n};\n\nstruct SOccluderBsp\n{\n	SOccluderPlane* pOccluders;\n	uint32 nNumOccluders;\n	TArray<SOccluderBspNode> Nodes;\n};\n\nint BspAddInternal(SOccluderBsp* pBsp, uint32 nOccluderIndex, uint32 nMask)\n{\n	int r = (int)pBsp->Nodes.Size();\n	int nPrev = -1;\n	for(uint32 i = 0;nMask && i < 4; ++i)\n	{\n		if(nMask&1)\n		{\n			int nIndex = (int)pBsp->Nodes.Size();\n			SOccluderBspNode* pNode = pBsp->Nodes.PushBack();\n			pNode->nOutside = OCCLUDER_EMPTY;\n			pNode->nInside = OCCLUDER_LEAF;\n			pNode->Index.nEdge = (uint8)i;\n			pNode->Index.nOccluderIndex = (uint16)nOccluderIndex;\n			if(nPrev >= 0)\n			{\n				pBsp->Nodes[nPrev].nInside = (uint16)nIndex;\n			}\n			nPrev = nIndex;\n		}\n		nMask >>= 1;\n	}\n	return r;\n}\n\nvoid BspAddOccluderRecursive(SOccluderBsp* pBsp, SOccluderPlane* pOccluder, uint32 nOccluderIndex, uint32 nBspIndex, uint32 nEdgeMask)\n{\n	SOccluderBspNode Node = pBsp->Nodes[nBspIndex];\n	ZASSERT(Node.Index.nOccluderIndex != nOccluderIndex);\n	SOccluderPlane* pPlane = pBsp->pOccluders + Node.Index.nOccluderIndex;\n	uint8 nEdge = Node.Index.nEdge;\n	float4 vPlane = pPlane->p[nEdge];\n	int inside[4];\n\n	for(int i = 0; i < 4; ++i)\n		inside[i] = WVectorDot4(vPlane, pOccluder->corners[i]) < -0.01f;\n	uint32 nNewMaskIn = 0, nNewMaskOut = 0;\n	int x = 1;\n	for(int i = 0; i < 4; ++i)\n	{\n		if(x&nEdgeMask)\n		{\n			if(inside[(i-1)%4] || inside[i])\n				nNewMaskIn |= x;\n			if((!inside[(i-1)%4]) || (!inside[i]))\n				nNewMaskOut |= x;\n		}\n		x <<= 1;\n	}\n	if(nNewMaskIn)\n	{\n		ZASSERT(Node.nInside != OCCLUDER_EMPTY);\n		if(Node.nInside==OCCLUDER_LEAF)\n		{\n			pBsp->Nodes[nBspIndex].nInside = (uint16)BspAddInternal(pBsp, nOccluderIndex, nNewMaskIn);\n		}\n		else\n		{\n			BspAddOccluderRecursive(pBsp, pOccluder, nOccluderIndex, Node.nInside, nNewMaskIn);\n		}\n	}\n\n	if(nNewMaskOut)\n	{\n		ZASSERT(Node.nOutside != OCCLUDER_LEAF);\n		if(Node.nOutside==OCCLUDER_EMPTY)\n		{\n			pBsp->Nodes[nBspIndex].nOutside = (uint16)BspAddInternal(pBsp, nOccluderIndex, nNewMaskOut);\n		}\n		else\n		{\n			BspAddOccluderRecursive(pBsp, pOccluder, nOccluderIndex, Node.nOutside, nNewMaskOut);\n		}\n	}\n}\n\n\nvoid BspAddOccluder(SOccluderBsp* pBsp, SOccluderPlane* pOccluder, uint32 nOccluderIndex)\n{\n	uint32 nNumNodes = (uint32)pBsp->Nodes.Size();\n	if(pBsp->Nodes.IsEmpty())\n	{\n		uint16 nIndex = (uint16)BspAddInternal(pBsp, nOccluderIndex, 0xf);\n		ZASSERT(nIndex==0);\n	}\n	else\n	{\n		BspAddOccluderRecursive(pBsp, pOccluder, nOccluderIndex, 0, 0xf);\n	}\n	uprintf(\"BSP NODE %d -> %d\\n\", nNumNodes, pBsp->Nodes.Size());\n	uplotfnxt(ZString::Format(\"BSP NODE {0} -> {1}\", nNumNodes, pBsp->Nodes.Size()));\n\n}\n\n\nvoid BuildBsp(SOccluderBsp* pBsp)\n {\n	pBsp->Nodes.Clear();\n	if(!pBsp->nNumOccluders)\n		return;\n\n	for(uint32 i = 0; i < pBsp->nNumOccluders; ++i)\n	{\n		BspAddOccluder(pBsp, &pBsp->pOccluders[i], i);\n	}\n}\nZConfigInt g_nBspFlipMask(\"BspFlipMask\", \"\", 0);\nZConfigInt g_nBspDrawMask(\"BspDrawMask\", \"\", -1);\nvoid DrawBspRecursive(SOccluderBsp* pBsp, uint32 nOccluderIndex, uint32 nFlipMask, uint32 nDrawMask, float fOffset, TArray<float4>& DEBUG)\n{\n	SOccluderBspNode Node = pBsp->Nodes[nOccluderIndex];\n	SOccluderPlane* pPlane = pBsp->pOccluders + Node.Index.nOccluderIndex;\n	float4 vOffset = WSet(fOffset, 0.f, 0.f, 0.f);\n	float4 v0 = WSetWOne(pPlane->corners[(Node.Index.nEdge+3) %4]);\n	float4 v1 = WSetWOne(pPlane->corners[(Node.Index.nEdge) %4]);\n	DEBUG.PushBack(v0);\n	DEBUG.PushBack(v1);\n	if(1)\n	{\n		for(uint32 i = 0; i < DEBUG.Size(); i += 2)\n		{\n			float4 v0 = DEBUG[i] + vOffset;\n			float4 v1 = DEBUG[i+1] + vOffset;\n			ZDEBUG_DRAWLINE(v0, v1, 0xffff44ff, true);\n		}\n	}\n	if(0 == (nFlipMask&1))\n	{\n		if((Node.nInside&0x8000) == 0)\n		{\n			DrawBspRecursive(pBsp, Node.nInside, nFlipMask>>1, nDrawMask>>1, fOffset - 2.0f, DEBUG);\n		}\n	}\n	else\n	{\n		if((Node.nOutside&0x8000) == 0)\n		{\n			DrawBspRecursive(pBsp, Node.nOutside, nFlipMask>>1, nDrawMask>>1, fOffset - 2.0f, DEBUG);\n		}\n	}\n}\n\nbool BspClipQuadR(SOccluderBsp* pBsp, uint32 nNodeIndex, uint32 nPolyIndex, uint32 nPolyVertices, uint32 nVertexIndex, float4* pVertices, uint8* , nIndices);)\n{\n	uint8 nIndicesIn[256];\n	uint8 nIndicesOut[256];\n	uint8* nDot = alloca(2*(nPolyVertices+2));\n	SOccluderBspNode* pNode = pBsp->Nodes[nOccluderIndex];\n	SOccluderPlane* pOccluder = pBsp->pOccluders + pNode->Index.nOccluderIndex;\n	uint32 nEdge = pNode->Index.nEdge;\n	float4 vPlane = pOccluder->p[nEdge];\n	float vNormalPlane = pOccluder->normal;\n	\n#define INSIDE 1\n#define OUTSIDE 2\n	//test mod planet\n	int nMask = 0;\n	int n = 1;\n	for(uint32 i = 0; i < nPolyVertices; ++i)\n	{\n		float4 pVertex = pVertices[ nIndices[i + nPolyIndex ]];\n		d = WVectorDot4(pVertex, vPlane) > 0.0f ? INSIDE : OUTSIDE;\n		n = n && WVectorDot4(pVertex, vNormalPlane) > 0.f ? 1 : 0;\n		nDot[i] = d;\n		nMask |= d;\n	}\n	if(d == 3)\n	{\n		int nIndexIn = 0;\n		for(uint32 i = 0; i < nPolyVertices; ++i)\n		{\n			int idxn = (i + 1) % nPolyVertices;\n			int i0 = nDot[i];\n			int i1 = nDot[idxn];\n			if(INSIDE == i0)\n			{\n				//PUSH i0				\n				ZASSERT(nNewPolyIndex < OCCLUDER_CLIP_MAX);\n				if(OUTSIDE == i1)\n				{\n\n					//PUSH INTERSECTION\n					float4 vVertex = WSetWOne(pVertices[ nIndices[ i + nPolyIndex ]]);\n					float4 vToPlane = WVectorDot4(vVertex, vPlane) * WSetWZero(vPlane);\n					float4 vIntersection = vVertex + vToPlane;\n					uprintf(\"INTERSECTION IS %f\\n\", WVectorDot4(vIntersection, vPlane).ToFloat());\n					int nIndex = nVertexIndex++;\n					pVertices[nIndex] = vIntersection;\n\n					nIndicesIn[nIndexIn++] = i + nPolyIndex;\n					nIndicesIn[nIndexIn++] = nIndex;\n					nIndicesOut[nIndexOut++] = nIndex;\n					ZASSERT(nIndexIn < 256);\n				}\n				else\n				{\n					nIndicesIn[nIndexIn++] = i + nPolyIndex;\n				}\n			}\n			else\n			{\n				if(i1 == INSIDE)\n				{\n					//PUSH INTERSECTION\n					float4 vVertex = WSetWOne(pVertices[ nIndices[ i + nPolyIndex ]]);\n					float4 vToPlane = WVectorDot4(vVertex, vPlane) * WSetWZero(vPlane);\n					float4 vIntersection = vVertex + vToPlane;\n					uprintf(\"INTERSECTION IS %f\\n\", WVectorDot4(vIntersection, vPlane).ToFloat());\n					int nIndex = nVertexIndex++;\n					pVertices[nIndex] = vIntersection;\n\n					nIndicesIn[nIndexIn++] = nIndex;\n					nIndicesOut[nIndexOut++] = nIndex;\n					nIndicesOut[nIndexOut++] = i + nPolyIndex;\n					ZASSERT(nNewPolyIndex < OCCLUDER_CLIP_MAX);\n				}\n				else\n				{\n					nIndicesOut[nIndexOut++] = i + nPolyIndex;\n				}\n			}\n		}\n		int nNumIndices = nNewPolyIndex - (nPolyIndex + nPolyVertices);\n		return BspClipQuadR(pBsp, pNode->nInside, nNewPolyIndex, nNumIndices, nVertexIndex, pVertices, nIndices);\n	}\n	else\n	{\n		if(d == 1)\n		{\n			// all in inside\n			ZASSERT(pNode->nInside != OCCLUDER_EMPTY);\n			if(pNode->nInside == OCCLUDER_LEAF)\n			{\n				return n != 0;\n			}\n			else\n			{\n				return n != 0 && BspClipQuadR(pBsp, pBsp->nInside, nPolyIndex, nPolyVertices, nVertexIndex, pVertices, nIndices);\n\n			}\n\n		}\n		else\n		{\n			// all in outside\n			ZASSERT(pNode->nOutside != OCCLUDER_LEAF);\n			if(pNode->nOutside == OCCLUDER_EMPTY)\n			{\n				ZASSERT(nPolyVertices); \n				return false; // all is out, none is clipped\n			}\n			else\n			{\n				return BspClipQuadR(pBsp, pNode->nOutside, nPolyIndex, nPolyVertices, nVertexIndex, pVertices, nIndices);\n			}\n		}\n	}\n}\n//returns true if 100% clipped\nbool BspClipQuad(SOccluderBsp* pBsp, float4arg v0, float4arg v1, float4arg v2, float4arg v3)\n{\n	float4 vClipBuffer[OCCLUDER_CLIP_MAX];\n	uint8 nInidices[OCCLUDER_CLIP_MAX];\n	vClipBuffer[0] = v0;\n	vClipBuffer[1] = v1;\n	vClipBuffer[2] = v2;\n	vClipBuffer[3] = v3;\n	nInidices[0] = 0;\n	nInidices[1] = 1;\n	nInidices[2] = 2;\n	nInidices[3] = 3;\n	return BspClipQuadR(pBsp, 0, 0, 4, 4, &vClipBuffer[0], &nIndices[0]);\n}\n\nvoid RunBspTest(SOccluderBsp* pBsp, SOccluderPlane* pTest, uint32 nNumOccluders, ZRenderGraphNode** ppNodes, uint32 nNumNodes)\n{\n	for(uint32 i = 0; i< nNumNodes; ++i)\n	{\n		if(!ppNodes[i]) \n			continue;\n		SMatrix mObjectToWorld = ppNodes[i]->GetObjectToWorldTransform();\n		float4 vHalfSize = ppNodes[i]->GetLocalHalfSize();\n		float4 vCenter = ppNodes[i]->GetLocalCenter();\n		float4 vCenterWorld = WVectorTransform(mObjectToWorld, vCenter);\n		float4 AABB = TransformOBBToAABB(mObjectToWorld, vHalfSize);\n\n		float4 vCenterPoly = vCenterWorld - WSet(AABB.x(), 0.f, 0.f, 0.f);\n		float4 vDir0 = WSet(0.f,  AABB.y(),  AABB.z(), 0.f);\n		float4 vDir1 = WSet(0.f, -AABB.y(),  AABB.z(), 0.f);\n		float4 vDir2 = WSet(0.f, -AABB.y(), -AABB.z(), 0.f);\n		float4 vDir3 = WSet(0.f,  AABB.y(), -AABB.z(), 0.f);\n		float4 v0 = vCenterPoly + vDir0;\n		float4 v1 = vCenterPoly + vDir1;\n		float4 v2 = vCenterPoly + vDir2;\n		float4 v3 = vCenterPoly + vDir3;\n		ZDEBUG_DRAWLINE(v0, v1, 0xff0000ff, true);\n		ZDEBUG_DRAWLINE(v1, v2, 0xff0000ff, true);\n		ZDEBUG_DRAWLINE(v2, v3, 0xff0000ff, true);\n		ZDEBUG_DRAWLINE(v3, v0, 0xff0000ff, true);\n		BspClipQuad(pBsp, v0, v1, v2, v3);\n	}\n	TArray<float4> DEBUG;\n	DrawBspRecursive(pBsp, 0, g_nBspFlipMask, g_nBspDrawMask, -1.f, DEBUG);\n}\n\nfloat4 MakePlane(float4arg p, float4arg normal)\n{\n	float4 r = WSetW(-(WVectorDot3(normal,p).ToFloat()), normal);\n	float1 vDot = WVectorDot4(WSetW(1.f, p), r);\n	if(ZMath::Abs(vDot.ToFloat()) > 0.001f)\n	{\n		ZBREAK();\n	}\n\n	return r;\n}\n\nvoid BspOccluderTest(SOccluder* pOccluders, uint32 nNumOccluders, ZRenderGraphNode** ppNodes, uint32 nNumNodes)\n{\n	SOccluderPlane* pPlanes = ZNEW SOccluderPlane[nNumOccluders];\n	uint8* nMasks = ZNEW uint8[nNumOccluders];\n	memset(nMasks, 0xff, nNumOccluders);\n\n\n	float4 vCameraPosition = WLoadZero();\n	for(uint32 i = 0; i < nNumOccluders; ++i)\n	{\n		float4 vCorners[4];\n		SOccluder Occ = pOccluders[i];\n		float4 vNormal = WLoad3U(&Occ.vNormal.x);\n		float4 vUp = WLoad3U(&Occ.vUp.x);\n		float4 vLeft = WVectorCross3(vNormal, vUp);\n		float4 vCenter = WLoad3U(&Occ.vCenter.x);\n		vCorners[0] = vCenter + vUp * Occ.vSize.y + vLeft * Occ.vSize.x;\n		vCorners[1] = vCenter - vUp * Occ.vSize.y + vLeft * Occ.vSize.x;\n		vCorners[2] = vCenter - vUp * Occ.vSize.y - vLeft * Occ.vSize.x;\n		vCorners[3] = vCenter + vUp * Occ.vSize.y - vLeft * Occ.vSize.x;\n		SOccluderPlane& Plane = pPlanes[i];\n\n		for(uint32 i = 0; i < 4; ++i)\n		{\n			float4 v0 = vCorners[i];\n			float4 v1 = vCorners[(i+1) % 4];\n			float4 v2 = vCameraPosition;\n			float4 vCenter = (v0 + v1 + v2) / WReplicate(3.f);\n			float4 vNormal = WVectorNormalize3(WVectorCross3(WVectorNormalize3(v1 - v0), WVectorNormalize3(v2 - v0)));\n			float4 vEnd = vCenter + vNormal;\n			Plane.p[i] = MakePlane(vCorners[i], vNormal);\n			Plane.corners[i] = vCorners[i];\n			ZDEBUG_DRAWLINE(v0, v1, (uint32)-1, true);\n			ZDEBUG_DRAWLINE(v1, v2, (uint32)-1, true);\n			ZDEBUG_DRAWLINE(v2, v0, (uint32)-1, true);\n			ZDEBUG_DRAWLINE(vCenter, vEnd, 0xff00ffff, true);\n		}\n		Plane.normal = MakePlane(vCorners[0], vNormal);\n	}\n	SOccluderBsp Bsp;\n	Bsp.pOccluders = pPlanes;\n	Bsp.nNumOccluders = nNumOccluders;\n\n	BuildBsp(&Bsp);\n\n	RunBspTest(&Bsp, pPlanes, nNumOccluders, ppNodes, nNumNodes);\n\n	ZDELETE(pPlanes);\n}\n\n\n",
			"settings":
			{
				"buffer_size": 11336,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "",
			"file": "In file included from /usr/include/c++/4.2.1/algorithm",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "(x1 z0 - x2 z0 - x0 z1 + x2 z1 + x0 z2 - x1 z2 != 0 && \nx == (-(f1 z0) + f2 z0 - y1 z0 + y2 z0 + f0 z1 - f2 z1 + y0 z1 - y2 z1 - f0 z2 + f1 z2 - y0 z2 + y1 z2)/(x1 z0 - x2 z0 - x0 z1 + x2 z1 + x0 z2 - x1 z2) \n&& z0 - z2 != 0 && \ny == (f2 x1 z0 - f1 x2 z0 - x2 y1 z0 + x1 y2 z0 - f2 x0 z1 + f0 x2 z1 + x2 y0 z1 - x0 y2 z1 + f1 x0 z2 - f0 x1 z2 - x1 y0 z2 + x0 y1 z2)\n/(-(x1 z0) + x2 z0 + x0 z1 - x2 z1 - x0 z2 + x1 z2) \n&& z0 != 0 && z == (f1 x0 - f2 x0 - f0 x1 + f2 x1 + f0 x2 - f1 x2 - x1 y0 + x2 y0 + x0 y1 - x2 y1 - x0 y2 + x1 y2)/(x1 z0 - x2 z0 - x0 z1 + x2 z1 + x0 z2 - x1 z2)) || (z0 == 0 && x0 z1 - x2 z1 - x0 z2 + x1 z2 != 0 && x == (-(f0 z1) + f2 z1 - y0 z1 + y2 z1 + f0 z2 - f1 z2 + y0 z2 - y1 z2)/(x0 z1 - x2 z1 - x0 z2 + x1 z2) && y == (-(f2 x0 z1) + f0 x2 z1 + x2 y0 z1 - x0 y2 z1 + f1 x0 z2 - f0 x1 z2 - x1 y0 z2 + x0 y1 z2)/(x0 z1 - x2 z1 - x0 z2 + x1 z2) && z1 != 0 && z == (-(f1 x0) + f2 x0 + f0 x1 - f2 x1 - f0 x2 + f1 x2 + x1 y0 - x2 y0 - x0 y1 + x2 y1 + x0 y2 - x1 y2)/(x0 z1 - x2 z1 - x0 z2 + x1 z2) && z2 != 0) || (z0 == z2 && x0 - x2 != 0 && x == (-f0 + f2 - y0 + y2)/(x0 - x2) && z1 - z2 != 0 && y == (-(f2 x0 z1) + f0 x2 z1 + x2 y0 z1 - x0 y2 z1 + f1 x0 z2 - f0 x1 z2 + f2 x1 z2 - f1 x2 z2 - x1 y0 z2 + x0 y1 z2 - x2 y1 z2 + x1 y2 z2)/((x0 - x2) (z1 - z2)) && z1 != 0 && z == (-(f1 x0) + f2 x0 + f0 x1 - f2 x1 - f0 x2 + f1 x2 + x1 y0 - x2 y0 - x0 y1 + x2 y1 + x0 y2 - x1 y2)/((x0 - x2) (z1 - z2))) || (z1 == 0 && z0 == 0 && x0 - x1 != 0 && x == (-f0 + f1 - y0 + y1)/(x0 - x1) && y == (-(f1 x0) + f0 x1 + x1 y0 - x0 y1)/(x0 - x1) && z2 != 0 && z == (f1 x0 - f2 x0 - f0 x1 + f2 x1 + f0 x2 - f1 x2 - x1 y0 + x2 y0 + x0 y1 - x2 y1 - x0 y2 + x1 y2)/((x0 - x1) z2)) || (z1 == 0 && z0 == z2 && x0 - x2 != 0 && x == (-f0 + f2 - y0 + y2)/(x0 - x2) && y == (-(f1 x0) + f0 x1 - f2 x1 + f1 x2 + x1 y0 - x0 y1 + x2 y1 - x1 y2)/(x0 - x2) && z2 != 0 && z == (f1 x0 - f2 x0 - f0 x1 + f2 x1 + f0 x2 - f1 x2 - x1 y0 + x2 y0 + x0 y1 - x2 y1 - x0 y2 + x1 y2)/((x0 - x2) z2)) || (z1 == z2 && x1 == x2 && f1 == f2 - y1 + y2 && z0 - z2 != 0 && y == (-(f2 z0) - x x2 z0 - y2 z0 + f0 z2 + x x0 z2 + y0 z2)/(z0 - z2) && z0 != 0 && z == (-f0 + f2 - x x0 + x x2 - y0 + y2)/(z0 - z2)) || (z1 == z2 && z0 == 0 && x1 == x2 && f1 == f2 - y1 + y2 && y == -f0 - x x0 - y0 && z2 != 0 && z == (f0 - f2 + x x0 - x x2 + y0 - y2)/z2) || (x1 == x2 && x0 == x2 && z1 - z2 != 0 && f0 == (f1 z0 - f2 z0 + y1 z0 - y2 z0 + f2 z1 - y0 z1 + y2 z1 - f1 z2 + y0 z2 - y1 z2)/(z1 - z2) && z0 - z2 != 0 && y == (f2 z1 + x x2 z1 + y2 z1 - f1 z2 - x x2 z2 - y1 z2)/(-z1 + z2) && z0 != 0 && z == (-f1 + f2 - y1 + y2)/(z1 - z2)) || (z0 == z2 && x0 == x2 && f0 == f2 - y0 + y2 && z1 - z2 != 0 && y == (-(f2 z1) - x x2 z1 - y2 z1 + f1 z2 + x x1 z2 + y1 z2)/(z1 - z2) && z1 != 0 && z == (-f1 + f2 - x x1 + x x2 - y1 + y2)/(z1 - z2) && x1 - x2 != 0) || (z0 == z2 && x1 == x2 && x0 == x2 && f0 == f2 - y0 + y2 && z1 - z2 != 0 && y == (-(f2 z1) - x x2 z1 - y2 z1 + f1 z2 + x x2 z2 + y1 z2)/(z1 - z2) && z1 != 0 && z == (-f1 + f2 - y1 + y2)/(z1 - z2)) || (z1 == 0 && z0 == 0 && x0 == x1 && f0 == f1 - y0 + y1 && y == -f1 - x x1 - y1 && z2 != 0 && z == (f1 - f2 + x x1 - x x2 + y1 - y2)/z2 && x1 - x2 != 0) || (z1 == 0 && z0 == 0 && x1 == x2 && x0 == x2 && f0 == f1 - y0 + y1 && y == -f1 - x x2 - y1 && z2 != 0 && z == (f1 - f2 + y1 - y2)/z2) || (z1 == 0 && z0 == z2 && x0 == x2 && f0 == f2 - y0 + y2 && y == -f1 - x x1 - y1 && z2 != 0 && z == (f1 - f2 + x x1 - x x2 + y1 - y2)/z2 && x1 - x2 != 0) || (z1 == 0 && z0 == z2 && x1 == x2 && x0 == x2 && f0 == f2 - y0 + y2 && y == -f1 - x x2 - y1 && z2 != 0 && z == (f1 - f2 + y1 - y2)/z2) || (z1 == z2 && z0 == z2 && x0 == x2 && f0 == f2 - y0 + y2 && x1 - x2 != 0 && x == (-f1 + f2 - y1 + y2)/(x1 - x2) && z2 != 0 && z == (-(f2 x1) + f1 x2 - x1 y + x2 y + x2 y1 - x1 y2)/((x1 - x2) z2)) || (z1 == z2 && z0 == z2 && x1 == x2 && f1 == f2 - y1 + y2 && x0 - x2 != 0 && x == (-f0 + f2 - y0 + y2)/(x0 - x2) && z2 != 0 && z == (-(f2 x0) + f0 x2 - x0 y + x2 y + x2 y0 - x0 y2)/((x0 - x2) z2)) || (z1 == z2 && z0 == z2 && x1 == x2 && x0 == x2 && f1 == f2 - y1 + y2 && f0 == f2 - y0 + y2 && z2 != 0 && z == (-f2 - x x2 - y - y2)/z2) || (z1 == z2 && z0 == z2 && x1 - x2 != 0 && f0 == (f1 x0 - f2 x0 + f2 x1 - f1 x2 - x1 y0 + x2 y0 + x0 y1 - x2 y1 - x0 y2 + x1 y2)/(x1 - x2) && x0 - x2 != 0 && x == (f1 - f2 + y1 - y2)/(-x1 + x2) && z2 != 0 && z == (f2 x1 - f1 x2 + x1 y - x2 y - x2 y1 + x1 y2)/((-x1 + x2) z2)) || (z2 == 0 && z1 == 0 && z0 == 0 && x0 == x2 && f0 == f2 - y0 + y2 && x1 - x2 != 0 && x == (-f1 + f2 - y1 + y2)/(x1 - x2) && y == (-(f2 x1) + f1 x2 + x2 y1 - x1 y2)/(x1 - x2)) || (z2 == 0 && z1 == 0 && z0 == 0 && x1 == x2 && f1 == f2 - y1 + y2 && x0 - x2 != 0 && x == (-f0 + f2 - y0 + y2)/(x0 - x2) && y == (-(f2 x0) + f0 x2 + x2 y0 - x0 y2)/(x0 - x2)) || (z2 == 0 && z1 == 0 && z0 == 0 && x1 == x2 && x0 == x2 && f1 == f2 - y1 + y2 && f0 == f2 - y0 + y2 && y == -f2 - x x2 - y2) || (z2 == 0 && z1 == 0 && z0 == 0 && x1 - x2 != 0 && f0 == (f1 x0 - f2 x0 + f2 x1 - f1 x2 - x1 y0 + x2 y0 + x0 y1 - x2 y1 - x0 y2 + x1 y2)/(x1 - x2) && x0 - x2 != 0 && x == (f1 - f2 + y1 - y2)/(-x1 + x2) && y == (f2 x1 - f1 x2 - x2 y1 + x1 y2)/(-x1 + x2)) || (z1 - z2 != 0 && x0 == (x1 z0 - x2 z0 + x2 z1 - x1 z2)/(z1 - z2) && x1 - x2 != 0 && f0 == (f1 z0 - f2 z0 + y1 z0 - y2 z0 + f2 z1 - y0 z1 + y2 z1 - f1 z2 + y0 z2 - y1 z2)/(z1 - z2) && z0 - z2 != 0 && y == (f2 z1 + x x2 z1 + y2 z1 - f1 z2 - x x1 z2 - y1 z2)/(-z1 + z2) && z0 != 0 && z == (-f1 + f2 - x x1 + x x2 - y1 + y2)/(z1 - z2)) || (z0 == 0 && x1 == x2 && x0 == x2 && z1 - z2 != 0 && f0 == (f2 z1 - y0 z1 + y2 z1 - f1 z2 + y0 z2 - y1 z2)/(z1 - z2) && y == (-(f2 z1) - x x2 z1 - y2 z1 + f1 z2 + x x2 z2 + y1 z2)/(z1 - z2) && z1 != 0 && z == (-f1 + f2 - y1 + y2)/(z1 - z2) && z2 != 0) || (z0 == 0 && z1 - z2 != 0 && x0 == (x2 z1 - x1 z2)/(z1 - z2) && x1 - x2 != 0 && f0 == (f2 z1 - y0 z1 + y2 z1 - f1 z2 + y0 z2 - y1 z2)/(z1 - z2) && y == (-(f2 z1) - x x2 z1 - y2 z1 + f1 z2 + x x1 z2 + y1 z2)/(z1 - z2) && z1 != 0 && z == (-f1 + f2 - x x1 + x x2 - y1 + y2)/(z1 - z2) && z2 != 0)",
			"settings":
			{
				"buffer_size": 6027,
				"line_ending": "Unix",
				"name": "(x1 z0 - x2 z0 - x0 z1 + x2 z1 + x0 z2 - x1 z2 !="
			}
		},
		{
			"contents": "D0x0000: plane  0: 0   [i:0001,o:000d]\nD   0x0001: plane  0: 1   [i:0002,o:000a]\n\n\nD      0x0002: plane  0: 2   [i:0003,o:0008]\nD         0x0003: plane  0: 3   [i:0004,o:0006]\nD            0x0004: plane  1: 0   [i:0005,o:c000]\nD               0x0005: plane  1: 1   [i:8000,o:c000]\nD                  0x8000\nD                  0xc000\nD               0xc000\nD            0x0006: plane  1: 0   [i:0007,o:c000]\nD               0x0007: plane  1: 1   [i:8000,o:c000]\nD                  0x8000\nD                  0xc000\nD               0xc000\nD         0x0008: plane  1: 1   [i:0009,o:c000]\nD            0x0009: plane  1: 3   [i:8000,o:c000]\nD               0x8000\nD               0xc000\nD            0xc000\nD      0x000a: plane  1: 1   [i:000b,o:c000]\nD         0x000b: plane  1: 2   [i:000c,o:c000]\nD            0x000c: plane  1: 3   [i:8000,o:c000]\nD               0x8000\nD               0xc000\nD            0xc000\nD         0xc000\nD   0x000d: plane  1: 0   [i:000e,o:c000]\nD      0x000e: plane  1: 1   [i:000f,o:c000]\nD         0x000f: plane  1: 3   [i:8000,o:c000]\nD            0x8000\nD            0xc000\nD         0xc000\nD      0xc000\n\n",
			"settings":
			{
				"buffer_size": 1135,
				"line_ending": "Unix",
				"name": "D0x0000: plane  0: 0   [i:0001,o:000d]"
			}
		},
		{
			"contents": "type summary add --summary-string \"[${var.x}, ${var.y}, ${var.z}]\\t\\t(${var%L})\" v3\n",
			"settings":
			{
				"buffer_size": 84,
				"line_ending": "Unix",
				"name": "type summary add --summary-string \"[${var.x}, ${va"
			}
		},
		{
			"file": "src/Makefile",
			"settings":
			{
				"buffer_size": 1095,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/microprofile.h",
			"settings":
			{
				"buffer_size": 58697,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/User/mybuild.sublime-build",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
		],
		"width": 404.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": true,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/D/bsp/default.vs",
		"/D/bsp/flat.ps",
		"/D/bsp/glew.c",
		"/D/bsp/fixedarray.h",
		"/D/bsp/text.cpp",
		"/D/bsp/base.h",
		"/D/bsp/text.h",
		"/D/bsp/debug.cpp",
		"/D/bsp/input.cpp",
		"/D/bsp/debug.h",
		"/D/bsp/bsp.h",
		"/Users/jonasm/.lldbinit",
		"/usr/include/c++/4.2.1/bits/stl_algo.h",
		"/D/bsp/In file included from bsp.cpp",
		"/D/bsp/input.h",
		"/D/bsp/glinc.h",
		"/D/bsp/Makefile",
		"/Users/jonasm/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/Users/jonasm/Library/Application Support/Sublime Text 3/Packages/User/Distraction Free.sublime-settings",
		"/D/bsp/math.cpp",
		"/D/bsp/math.h",
		"/D/bsp/program.h",
		"/D/bsp/manipulator.cpp",
		"/D/bsp/fwd.h",
		"/D/bsp/manipulator.h",
		"/D/bsp/shader.cpp",
		"/D/bsp/shader.h",
		"/D/bsp/mesh.cpp",
		"/D/bsp/mesh.h",
		"/D/bsp/program.cpp",
		"/Users/jonasm/slasher/sdl/src/video/quartz/SDL_QuartzVideo.m",
		"/D/bsp/main.cpp",
		"/D/bsp/bsp.cpp",
		"/Users/jonasm/screenbsp/basic.vs",
		"/Users/jonasm/screenbsp/[shell_cmd",
		"/Users/jonasm/screenbsp/make",
		"/Users/jonasm/screenbsp/                uplotfnxt(\"FLIP %d==%d\", i, bFlip?1",
		"/Users/jonasm/screenbsp/In file included from shader.cpp",
		"/Users/jonasm/screenbsp/[dir",
		"/Users/jonasm/screenbsp/        SOccluderEdgeIndex* = ECPR_BOTH == CR ? &ClippedPoly[nNumEdgeInd] ",
		"/Users/jonasm/Library/Application Support/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/Users/jonasm/screenbsp/bsp",
		"/Users/jonasm/screenbsp/debugdraw.h",
		"/Users/jonasm/screenbsp/debug.h",
		"/Users/jonasm/Library/Application Support/Sublime Text 3/Packages/User/Default (OSX).sublime-keymap"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"fToMs",
			"MicroProfileTickToMs",
			"Sleep",
			"pWorldObjects",
			"dot",
			"BspCullObjectR",
			"ZDEBUG_DRAWBOX",
			"i",
			"DRAWBOU",
			"DRAWBO",
			"vHalfSize",
			"glPushMatrix",
			"CreateFlatMesh",
			"CreateProgram",
			"pMesh",
			".no",
			"normal",
			"v3",
			".Normal",
			"MESH_",
			"glEnableClientState",
			"].",
			"GLHandleARB",
			"CheckGlError",
			"CheckGLError",
			"LinkedProgram",
			"type",
			"PFNGLCREATESHADERPROGRAMVPROC",
			"Program",
			"PFNGLCREATESHADERPROGRAMVPROC",
			"glCreateShaderProgramv",
			"glCreateShaderProgramvARB",
			"buf",
			"GLEW_ARB_separate_shader_objects",
			"GLEW_ARB_Seperate",
			"GLEW_ARB_S",
			"CreateSphereMesh",
			"Mesh",
			"void uprintf",
			"pQuad",
			"Quad",
			"const",
			"nSubDivs",
			"nVertices",
			"pQuads",
			"pVertices",
			"Normal",
			"pSphereMesh",
			"+4",
			".Normal",
			";",
			"0]",
			"]",
			"(f,",
			"Mesh",
			"GL_DEPTH_TEST",
			"ProgramMain",
			"GL_DEPTH_TEST",
			"Depth",
			"],",
			"BspOccluderDebugDraw",
			"i",
			"pOccluders",
			"i",
			"bFlip",
			"vNormalPlane",
			"bFlip",
			"window_view",
			"setWantsBestResolutionOpenGLSurface",
			"setWantsBestResolutionOpenGLSurface:YES",
			"window_view respondsToSelector:@selector",
			"g_BaseWidth",
			"near is",
			"g_WorldState.Camera.vPosition",
			"fNear",
			"desc",
			"1",
			"zNear",
			"znear",
			"Desc",
			"vOrigin",
			"flip",
			"flipped",
			"3",
			"TESS_FACT",
			"g_nBspDebugPlane",
			"BspDebugDrawHalfspace",
			"nVertices",
			"BspAddInternal",
			"flip",
			"BspAddOccluder",
			"i",
			"Occluders",
			"BspAddOccluder",
			"alias",
			"world",
			"BspAddInternal",
			"BspAddOccluder",
			"vCorners",
			"pPlanes",
			"g_nBspOccluderDrawOccluders",
			"randcolor",
			"g_nBspOccluderDrawEdges",
			"ZDEBUG_DRAWBOX",
			"spaces",
			"BspClipPoly",
			"BspAddOccluderRecursive",
			"BspAddInternal",
			"DEBUG_OFFSET",
			"g_nBspOccluderDebugDrawClipResult",
			"g_nBspOccluderDrawEdges",
			"g_nBspOccluderDebugDraw",
			"g_nBspOccluderDrawEdges",
			"g_nOccluderDebug",
			"g_nBspOccluderDebugDraw",
			"BspOccluderDebugDraw",
			"debugdra",
			"vNormal",
			"v3init(",
			"v3zero",
			"mperspective",
			"g_nUseDebugCameraPos",
			"Desc.vOrigin",
			"mperspective",
			"0r",
			"uplotfnxt",
			"-1",
			"vCamLocked"
		],
		"highlight": false,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 15,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "glew/glew-1.9.0/include/GL/glew.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 884678,
						"regions":
						{
						},
						"selection":
						[
							[
								278963,
								278963
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 87527.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "renderlist.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 160,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "screenbsp.sublime-project",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49,
						"regions":
						{
						},
						"selection":
						[
							[
								49,
								49
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "premake4.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1007,
						"regions":
						{
						},
						"selection":
						[
							[
								819,
								819
							]
						],
						"settings":
						{
							"syntax": "Packages/Lua/Lua.tmLanguage",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/D/PRJ_PRO/main/code/readme.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5945,
						"regions":
						{
						},
						"selection":
						[
							[
								3093,
								3093
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 450.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/D/PRJ_PRO/main/code/src/base/misc/_windows/_internal/system_win32.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2840,
						"regions":
						{
						},
						"selection":
						[
							[
								193,
								193
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/D/PRJ_PRO/main/code/src/base/threading/_internal/_windows/thread_win32.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5479,
						"regions":
						{
						},
						"selection":
						[
							[
								3121,
								3121
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1948.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 32,
						"regions":
						{
						},
						"selection":
						[
							[
								32,
								32
							]
						],
						"settings":
						{
							"auto_name": "#pragma once",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": ".hgignore",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 56,
						"regions":
						{
						},
						"selection":
						[
							[
								11,
								11
							]
						],
						"settings":
						{
							"auto_name": ".depend",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 9,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11336,
						"regions":
						{
						},
						"selection":
						[
							[
								463,
								463
							]
						],
						"settings":
						{
							"auto_name": "",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "In file included from /usr/include/c++/4.2.1/algorithm",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 11,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6027,
						"regions":
						{
						},
						"selection":
						[
							[
								343,
								343
							]
						],
						"settings":
						{
							"auto_name": "(x1 z0 - x2 z0 - x0 z1 + x2 z1 + x0 z2 - x1 z2 !=",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 12,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1135,
						"regions":
						{
						},
						"selection":
						[
							[
								355,
								355
							]
						],
						"settings":
						{
							"auto_name": "D0x0000: plane  0: 0   [i:0001,o:000d]",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 13,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 84,
						"regions":
						{
						},
						"selection":
						[
							[
								84,
								84
							]
						],
						"settings":
						{
							"auto_name": "type summary add --summary-string \"[${var.x}, ${va",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "src/Makefile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1095,
						"regions":
						{
						},
						"selection":
						[
							[
								1089,
								1089
							]
						],
						"settings":
						{
							"syntax": "Packages/Makefile/Makefile.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "src/microprofile.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 58697,
						"regions":
						{
						},
						"selection":
						[
							[
								40151,
								40151
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 23959.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 333.0
	},
	"project": "screenbsp.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"micr",
				"microprofile.h"
			],
			[
				"makefile",
				"Makefile"
			],
			[
				"make",
				"D:\\bsp\\premake4.lua"
			],
			[
				"bsp",
				"bsp.h"
			],
			[
				"bs",
				"bsp.h"
			],
			[
				"pro",
				"program.h"
			],
			[
				"",
				"program.cpp"
			],
			[
				"debug",
				"debug.cpp"
			],
			[
				"de",
				"default.vs"
			],
			[
				"pr",
				"program.cpp"
			],
			[
				"main",
				"main.cpp"
			],
			[
				"debu",
				"debug.cpp"
			],
			[
				"deb",
				"debug.h"
			],
			[
				"mes",
				"mesh.cpp"
			],
			[
				"bspc",
				"bsp.cpp"
			],
			[
				"b",
				"basic.vs"
			],
			[
				"mesh",
				"mesh.cpp"
			],
			[
				"sh",
				"shader.h"
			],
			[
				"defa",
				"default.vs"
			],
			[
				"fl",
				"flat.ps"
			],
			[
				"def",
				"default.vs"
			],
			[
				"basic",
				"~/screenbsp/basic.vs"
			],
			[
				"sha",
				"shader.cpp"
			],
			[
				"me",
				"mesh.cpp"
			],
			[
				"shader",
				"shader.cpp"
			],
			[
				"basi",
				"basic.vs"
			],
			[
				"flat",
				"flat.ps"
			],
			[
				"glew.",
				"glew/glew-1.9.0/include/GL/glew.h"
			],
			[
				"progr",
				"program.cpp"
			],
			[
				".ps",
				"flat.ps"
			],
			[
				"glew.h",
				"glew/glew-1.9.0/include/GL/glew.h"
			],
			[
				"bas",
				"base.h"
			],
			[
				"glew",
				"glew.c"
			],
			[
				"g",
				"glinc.h"
			],
			[
				"shad",
				"shader.h"
			],
			[
				"dbeu",
				"debug.h"
			],
			[
				"base",
				"base.h"
			],
			[
				"math",
				"math.h"
			],
			[
				"prog",
				"program.cpp"
			],
			[
				"m",
				"math.cpp"
			],
			[
				"mani",
				"manipulator.cpp"
			],
			[
				"p",
				"program.cpp"
			],
			[
				"ma",
				"math.cpp"
			],
			[
				"mai",
				"main.cpp"
			],
			[
				"progra",
				"program.h"
			],
			[
				"fixarray",
				"fixedarray.h"
			],
			[
				"mat",
				"math.cpp"
			],
			[
				"math.c",
				"math.cpp"
			],
			[
				"dbeug",
				"debug.h"
			],
			[
				"gl",
				"glinc.h"
			],
			[
				"man",
				"manipulator.cpp"
			],
			[
				"fw",
				"fwd.h"
			],
			[
				"inpu",
				"input.h"
			],
			[
				"in",
				"input.h"
			],
			[
				"input",
				"input.cpp"
			],
			[
				"ll",
				"~/.lldbinit"
			],
			[
				"math.cp",
				"math.cpp"
			],
			[
				"mah",
				"math.h"
			],
			[
				"fix",
				"fixedarray.h"
			],
			[
				"bsp.c",
				"bsp.cpp"
			],
			[
				"program",
				"program.cpp"
			],
			[
				"math.",
				"math.h"
			],
			[
				"progrma",
				"program.cpp"
			],
			[
				"tex",
				"text.cpp"
			],
			[
				"glin",
				"glinc.h"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
