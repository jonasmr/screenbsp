//uniform sampler2D tex1; 


uniform sampler2D texLight;

uniform float lightDelta;
uniform int NumLights;
varying vec3 fNormal;
varying vec3 fWorldPos;

uniform vec3 LightPos[2];
uniform	vec3 LightColor[2];

 
void main(void)  
{

	vec3 Color = vec3(0,0,0);
	Color += vec3(0.4, 0.4, 0.4);
	vec3 Normal = normalize(fNormal);
	const float fAttenLength = 2.0;

	for(int i = 0; i < NumLights; i++)
	{
		#if 0
		vec3 Pos = LightPos[i];
		vec3 LCol = LightColor[i];
		#else
		vec2 tc0 = vec2(lightDelta*(float(i)*2.0), 0);
		vec2 tc1 = vec2(tc0.x + lightDelta, 0);
		vec3 Pos = texture2D(texLight, tc0).xyz;
		vec3 LCol = texture2D(texLight, tc1).xyz;
		//vec3 LCol = LightColor[i];
		#endif
		vec3 vToLight = fWorldPos - Pos;
		float fLen = length(vToLight);
		float fIntensity = (fLen / fAttenLength);
		fIntensity = 1.0 - fIntensity;
		fIntensity = min(max(fIntensity, 0.0), 1.0);
		fIntensity = fIntensity * fIntensity;
		vec3 vDir = -normalize(vToLight);
		float fAngle = max(dot(vDir, fNormal), 0.0);
		vec3 vDiffuse = fIntensity * fAngle * LCol;
		Color += vDiffuse;
	}
	gl_FragColor.xyz = Color;
	gl_FragColor.w = 1.0;
}

